import { body, param } from 'express-validator'

// Common variables
export const nameValidator = body('name')
  .isLength({ min: 1, max: 48 })
  .withMessage('Name must be between 1 and 48 characters')
  .trim()

export const emailValidator = body('email')
  .normalizeEmail()
  .isEmail()
  .withMessage('Invalid email address')
  .isLength({ max: 48 })
  .withMessage('Email must be at most 48 characters')
  .trim()

export const passwordValidator = body('password')
  .isLength({ min: 6, max: 16 })
  .withMessage('Password must be between 6 and 16 characters')
  .trim()
export const doctorIdValidator = body('doctorId')
  .trim()
  .matches(/^Dr-\d{4}$/)
  .withMessage('Doctor ID must be in the format Dr-xxxx, where x is a digit')
export const doctorIdParamValidator = param('doctorId')
  .trim()
  .matches(/^Dr-\d{4}$/)
  .withMessage('Doctor ID must be in the format Dr-xxxx, where x is a digit')
export const studentIdValidator = body('studentId')
  .trim()
  .isNumeric()
  .withMessage('Student ID must be numeric')
  .isLength({ min: 7, max: 7 })
  .withMessage('Student ID must be exactly seven digits')
export const studentIdParamValidator = param('studentId')
  .trim()
  .isNumeric()
  .withMessage('Student ID must be numeric')
  .isLength({ min: 7, max: 7 })
  .withMessage('Student ID must be exactly seven digits')
export const adminIdValidator = body('adminId')
  .matches(/^Admin-\d{4}$/)
  .withMessage('Admin ID must be in the format Admin-xxxx, where x is a digit')
  .trim()
export const adminIdParamValidator = param('adminId')
  .matches(/^Admin-\d{4}$/)
  .withMessage('Admin ID must be in the format Admin-xxxx, where x is a digit')
  .trim()
export const batchValidator = body('batch')
  .isNumeric()
  .withMessage('Batch must be a numeric value')
  .isLength({ min: 4, max: 4 })
  .withMessage('Batch must be a 4-digit value')

export const profileImageValidator = body('profileImage')
  .isURL()
  .withMessage('Profile Image must be a valid URL')

export const departmentValidator = body('department')
  .isLength({ max: 3, min: 1 })
  .withMessage('Department must be of at least 1 & at most 3 characters')
export const designationValidator = body('designation')
  .isLength({ max: 48 })
  .withMessage('Designation must be at most 48 characters')
export const mobileNumberValidator = body('mobileNo')
  .matches(/^(\+88)?01[0-9]{9}$/)
  .withMessage('Invalid Bangladesh mobile number format')
export const levelValidator = body('Level')
  .isInt({ min: 1, max: 4 })
  .withMessage('Level must be an integer between 1 and 4')
export const termValidator = body('Term')
  .isInt({ min: 1, max: 2 })
  .withMessage('Term must be an integer between 1 and 2')
export const bloodGroupValidator = body('bloodGroup')
  .matches(/^(A|B|AB|O)[+-]$/)
  .withMessage('Invalid blood group format')
export const sessionValidator = body('session')
  .matches(/^20\d{2}-20\d{2}$/)
  .custom((value: string) => {
    const years = value.split('-').map((e: string) => Number(e))

    if (years.length === 2 && years[1] === years[0] + 1) {
      return true
    }

    throw new Error('Invalid session format')
  })
export const residentValidator = body('resident')
  .isBoolean()
  .withMessage('Resident must be a boolean value')

// Common validator for hallName (string, at most 48 characters)
export const hallNameValidator = body('hallName')
  .isString()
  .withMessage('Hall name must be a string')
  .isLength({ max: 48 })
  .withMessage('Hall name must be at most 48 characters')
export const serialNoParamValidator = param('serialNo')
  .isInt({ allow_leading_zeroes: false })
  .withMessage('Serial number must be a valid integer')
export const uuidValidator = (keyName: string, isBody: boolean = true) =>
  isBody
    ? body(keyName).isUUID().withMessage(`${keyName} must be a valid UUID`)
    : param(keyName).isUUID().withMessage(`${keyName} must be a valid UUID`)
export const medicinesValidator = [
  body()
    .isArray({ min: 1 })
    .withMessage('Medicines should be an array with at least one element'),
  body('*.name').isString().withMessage('Medicine name must be a string'),
  body('*.dose').isString().withMessage('Medicine dose must be a string'),
]
export const descriptionValidator = body('description')
  .optional()
  .isString()
  .withMessage('Description must be a string')
  .isLength({ max: 255 })
  .withMessage('Description must be at most 255 characters')
